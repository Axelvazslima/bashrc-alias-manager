import os
import re

# ================== SECTION MARKERS ==================
START_MARKER = "# ----- AUTO GENERATED BY AV PYTHON SCRIPT START -----"
END_MARKER = "# ----- AUTO GENERATED BY AV PYTHON SCRIPT END -----"
COMMENT_TEMPLATE = "# -----AUTO GENERATED BY AV PYTHON SCRIPT -----\n# -----{} COMMANDS-----"

# ================== COMMAND GROUPS ==================
main_cmds = {
    "ls": "l",
    "grep -rl": "lfor",
    "clear": "cl",
    "cd -": "back",
    "python3": "p",
    "source ~/.bashrc": "rstb"
}

git_cmds = {
    "git status": "gst",
    "git add": "ga",
    "git commit -m": "gcm",
    "git pull": "gpl",
    "git push": "gps"
}

docker_cmds = {
    "docker ps": "dps",
    "docker container": "dc",
    "docker container run": "dcr",
    "docker container ls -a": "dcla",
    "docker stop": "ds",
    "docker container rm": "drm",
    "docker rm -f": "drmf"
}

def get_section_aliases(content):
    """Extract existing aliases from our managed section"""
    start_idx = next((i for i, line in enumerate(content) if line.strip() == START_MARKER.strip()), -1)
    end_idx = next((i for i, line in enumerate(content) if line.strip() == END_MARKER.strip()), -1)
    
    section_aliases = {}
    if start_idx != -1 and end_idx != -1:
        for line in content[start_idx+2:end_idx]:  # Skip markers and comment
            if match := re.match(r'alias (\w+)=[\'"](.+?)[\'"]$', line.strip()):
                alias_name, command = match.groups()
                section_aliases[alias_name] = command
    return section_aliases

def update_bashrc_section(all_aliases):
    """Smart section updater with proper positioning"""
    bashrc_path = os.path.expanduser("~/.bashrc")
    
    try:
        with open(bashrc_path, 'r') as f:
            content = f.read().split('\n')
    except Exception as e:
        print(f"Error reading .bashrc: {e}")
        return

    # Build new section content
    section_lines = [
        START_MARKER,
        COMMENT_TEMPLATE.format(len(all_aliases)),
        *[f"alias {name}='{cmd}'" for name, cmd in all_aliases.items()],
        END_MARKER
    ]

    # Find existing section position
    start_idx = next((i for i, line in enumerate(content) if line.strip() == START_MARKER.strip()), -1)
    end_idx = next((i for i, line in enumerate(content) if line.strip() == END_MARKER.strip()), -1)

    # Determine insertion point if section doesn't exist
    if start_idx == -1 or end_idx == -1:
        # Find optimal position: after last alias, before end-specific scripts
        insert_pos = 0
        last_alias_pos = -1
        end_scripts_marker = -1
        
        # Find last existing alias and potential end scripts
        for i, line in enumerate(content):
            if line.strip().startswith('alias '):
                last_alias_pos = i
            if 'ng completion' in line:  # Example end-specific script identifier
                end_scripts_marker = i
        
        if end_scripts_marker != -1:
            insert_pos = end_scripts_marker
        elif last_alias_pos != -1:
            insert_pos = last_alias_pos + 1
        else:
            # Insert after initial comments
            for i, line in enumerate(content):
                if not line.strip().startswith('#') and line.strip() != '':
                    insert_pos = i
                    break
        
        new_content = (
            content[:insert_pos] + 
            [''] + section_lines + [''] + 
            content[insert_pos:]
        )
    else:
        # Replace existing section
        new_content = (
            content[:start_idx] + 
            section_lines + 
            content[end_idx+1:]
        )

    try:
        with open(bashrc_path, 'w') as f:
            f.write('\n'.join(new_content))
    except Exception as e:
        print(f"Error writing .bashrc: {e}")

def find_all_aliases():
    bashrc_path = os.path.expanduser("~/.bashrc")
    return list(get_section_aliases(open(bashrc_path).read().split('\n')).keys())

def cmds_add():
    groups = {
        '1': ("Main Commands", main_cmds),
        '2': ("Git Commands", git_cmds),
        '3': ("Docker Commands", docker_cmds)
    }

    # Get current aliases from entire file
    existing = set(find_all_aliases())
    
    # Get current section aliases
    with open(os.path.expanduser("~/.bashrc")) as f:
        content = f.read().split('\n')
    section_aliases = get_section_aliases(content)
    
    # Collect new aliases
    selected = input("Choose groups (1-3 space separated): ").split()
    new_aliases = {}
    
    for choice in selected:
        if choice in groups:
            _, cmds = groups[choice]
            for cmd, name in cmds.items():
                if name not in existing and name not in section_aliases:
                    new_aliases[name] = cmd
    
    if new_aliases:
        # Merge with existing section aliases
        section_aliases.update(new_aliases)
        update_bashrc_section(section_aliases)
        print(f"Added {len(new_aliases)} new aliases")
    else:
        print("No new aliases to add")

def menu():
    while True:
        print("\n1. Add group aliases")
        print("2. Add custom alias")
        print("3. List aliases")
        print("4. Exit")
        choice = input("Choice: ").strip()

        if choice == '1':
            cmds_add()
        elif choice == '2':
            name = input("Alias name: ").strip()
            cmd = input("Command: ").strip()
            
            with open(os.path.expanduser("~/.bashrc")) as f:
                content = f.read().split('\n')
            
            existing = set(find_all_aliases())
            section_aliases = get_section_aliases(content)
            
            if name in existing:
                print("Error: Alias exists!")
            else:
                section_aliases[name] = cmd
                update_bashrc_section(section_aliases)
                print(f"Added: alias {name}='{cmd}'")
                
        elif choice == '3':
            with open(os.path.expanduser("~/.bashrc")) as f:
                section = get_section_aliases(f.read().split('\n'))
            print("\nManaged aliases:")
            for name, cmd in section.items():
                print(f"  {name}: {cmd}")
        elif choice == '4':
            exit()
        else:
            print("Invalid choice")

if __name__ == "__main__":
    menu()